JavaScript is the programming language that powers the web. Unlike the HTML and CSS, JavaScript is most commonly used to write logic instead of markup.

One of the most important concepts in programming is variables. A variable points to a specific memory address that stores a value. Variables are given a name which can be used throughout your code to access that value.

Declaring a variable means giving it a name. In JavaScript, this is often done with the let keyword.

Variable naming follows specific rules: names can include letters, numbers, dollar signs, and underscores, but cannot contain spaces and must not begin with a number.

You can assign a value using the assignment operator =.

JavaScript has seven primitive data types, with String being one of them. In JavaScript, a string represents a sequence of characters and can be enclosed in either single (') or double (") quotes.

Note that strings are immutable, which means once they are created, they cannot be changed. The variable can still be reassigned another value.

The console allows you to print and view JavaScript output. You can send information to the console using console.log(). 

When a variable is declared with the let keyword, you can reassign (or change the value of) that variable later on.

Note that when reassigning a variable, you do not use the let keyword again.

When variable names are more than one word, there are specific naming conventions for how you capitalize the words. In JavaScript, the convention to use is camel case.

Camel case means that the first word in the name is entirely lowercase, but the following words are all title-cased.

When you declare a variable without initializing it, it is considered uninitialized.

The default value of an uninitialized variable is undefined. This is a special data type that represents a value that does not have a definition yet.

You can also assign the value of a variable to another variable.

With the number data type, you can perform mathematical operations, like addition.


In programming, you will often need to work with lots of data. There are many data structures that can help you organize and manage your data. One of the most basic data structures is an array.

An array is a non-primitive data type that can hold a series of values. Non-primitive data types differ from primitive data types in that they can hold more complex data. Primitive data types like strings and numbers can only hold one value at a time.

Arrays are denoted using square brackets ([]).

When an array holds values, or elements, those values are separated by commas.

The order of values in an array is important, so follow that order. Remember that strings are case-sensitive.

You can access the values inside an array using the index of the value. An index is a number representing the position of the value in the array, starting from 0 for the first value.

You can access the value using bracket notation, such as array[0].

Arrays are special in that they are considered mutable. This means you can change the value at an index directly.

You can make use of the .length property of an array - this returns the number of elements in the array.

A method in JavaScript is a function that's associated with certain values or objects. An example you've already encountered is the .log() method, which is part of the console object.

Arrays have their own methods, and the first one is the .push() method. This allows you to "push" a value to the end of an array.

Another method essential for this project is the .pop() method. It removes the last element from an array and returns that element.

When a method returns a value, you can think of it as giving the value back to you, making it available for use in other parts of your code.